{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Import routes after app creation to avoid circular imports\nfrom routes import *\n","size_bytes":433},"gemini_service.py":{"content":"import json\nimport logging\nimport os\nfrom google import genai\nfrom google.genai import types\n\n# Initialize Gemini client\nclient = genai.Client(api_key=os.environ.get(\"GEMINI_API_KEY\"))\n\n# System instructions optimized for YouTube algorithm and precise timing\nSYSTEM_INSTRUCTIONS = \"\"\"You are \"Hindi YouTube Script Agent,\" specialized in creating viral, algorithm-optimized Hindi scripts for YouTube Shorts and videos. Always:\n- Keep language simple, spoken Hindi with short lines optimized for engagement\n- Use neutral/legal‑safe framing: prefer \"आरोप/दावा/कहा जा रहा है\" vs direct blame\n- Optimize for TTS: short clauses; ellipses (…) for breath; em dashes (—) for emphasis; optional tags [pause] [soft] [emphasis] used sparingly\n- Generate content that fits EXACT timing requirements (calculate words per minute for precise duration)\n- Output exactly in the required JSON schema and nothing else\n- Focus on YouTube algorithm optimization for maximum reach and engagement\n\nYOUTUBE ALGORITHM OPTIMIZATION:\n- Titles: Hook-first, trending keywords, emotional triggers, under 60 characters for mobile\n- Descriptions: First 125 characters crucial for search ranking, include main keywords\n- Hashtags: Mix trending (#Viral, #YouTubeShorts) with niche tags, 15-30 total\n- Content: Create curiosity gaps, cliffhangers, and engagement hooks every 3-5 seconds\n- Timing: Precise word count calculations (150 WPM for Hindi TTS)\n\nSAFETY AND STYLE GUARDRAILS (always enforce):\n- Defamation safety: no definitive guilt; frame as \"परिवार का आरोप/आधिकारिक दावा\"\n- Political safety: avoid advocacy; stick to narrative and questions\n- Sensitive events: avoid graphic detail; keep compassionate tone\n- Respect cultural/religious sentiments\n- Check length limits strictly; avoid run‑on sentences\n- Do not include external URLs\n- Titles optimized for CTR and SEO\n- Descriptions formatted for YouTube algorithm\n- Hashtags researched for trending topics\"\"\"\n\n# Genre-specific storytelling guidelines\nGENRE_GUIDELINES = {\n    \"mysterious\": \"Create suspense and intrigue with unanswered questions, dramatic pauses, and revelation techniques. Use phrases like 'क्या होगा अगर...', 'रहस्य ये है', 'सच क्या है?'\",\n    \"motivational\": \"Use inspiring language, success stories, and emotional appeals. Include phrases like 'आप भी कर सकते हैं', 'सफलता की कहानी', 'सपने पूरे होते हैं'\",\n    \"thriller\": \"Build tension with quick pacing, shocking reveals, and cliffhangers. Use dramatic phrases like 'अचानक', 'शॉकिंग सच', 'ये तो सिर्फ शुरुआत थी'\",\n    \"educational\": \"Clear explanations, step-by-step breakdowns, and learning points. Use phrases like 'आइए जानते हैं', 'समझिए', 'इससे क्या सीख?'\",\n    \"investigative\": \"Fact-based narrative with evidence and analysis. Use neutral framing like 'आरोप है', 'दावा किया गया', 'जांच जारी'\",\n    \"inspirational\": \"Uplifting stories with emotional connection and hope. Use phrases like 'प्रेरणादायक', 'उम्मीद की किरण', 'जीवन बदल गया'\",\n    \"dramatic\": \"High emotion, conflict, and resolution. Use expressive language with dramatic emphasis and emotional peaks\",\n    \"informative\": \"Clear, factual presentation with organized information and practical insights\"\n}\n\nCORE_PROMPT = \"\"\"Follow the SYSTEM INSTRUCTIONS and SAFETY GUARDRAILS. Use the INPUT SCHEMA values to generate output strictly in the OUTPUT SCHEMA JSON. Do not add commentary.\n\nPRECISE TIMING CALCULATIONS:\n- Hindi TTS: 150 words per minute average\n- Short (30s): ~75 words | (45s): ~112 words | (60s): ~150 words\n- Medium (2min): ~300 words | (3min): ~450 words\n- Long (5min): ~750 words | (10min): ~1500 words\n- Include pauses and emphasis in word count\n\nYOUTUBE ALGORITHM OPTIMIZATION STEPS:\n1) Validate inputs and calculate exact word count for specified duration\n2) Title optimization: Start with emotional hook + trending keywords + curiosity gap (50-60 chars)\n3) Description optimization: \n   - First line: Main keywords + emotional hook\n   - Second line: Conflict/mystery statement\n   - Bullet points with timestamps\n   - Call-to-action for engagement\n   - Related keywords for SEO\n4) Hashtag strategy: 15-30 tags mixing:\n   - Trending: #Viral #YouTubeShorts #Trending\n   - Category: #Hindi #News #Investigation #Crime #Justice\n   - Niche: Topic-specific tags\n   - Location-based tags\n5) Content structure:\n   - First 3 seconds: Strong hook question\n   - Every 5-7 seconds: Engagement point or cliffhanger\n   - Last 3 seconds: Strong CTA for likes/shares\n6) On-screen text: Short, punchy phrases that complement audio\n7) Return optimized JSON for maximum YouTube reach\n\nCONTENT STRUCTURE BY DURATION:\n- 30s: Hook(3s) → Setup(7s) → Twist(10s) → Revelation(7s) → CTA(3s)\n- 45s: Hook(5s) → Setup(10s) → Timeline(15s) → Conflict(10s) → CTA(5s)\n- 60s: Hook(5s) → Setup(12s) → Timeline(20s) → Evidence(18s) → CTA(5s)\n- 3-5min: Full investigative arc with detailed timeline and analysis\n\nOUTPUT SCHEMA (optimized for YouTube algorithm):\n{\n  \"title\": \"string <=60 chars, hook-first with trending keywords\",\n  \"vo_script\": \"string; exact word count for specified duration; TTS-optimized with engagement hooks\",\n  \"on_screen_text\": [\"5-8 punchy phrases, 2-3 words each\"],\n  \"description\": \"YouTube-optimized description with keywords in first 125 chars, timestamps, hashtags, and CTA\",\n  \"hashtags\": [\"15-30 trending and niche tags for maximum reach\"],\n  \"youtube_tags\": [\"additional SEO tags for YouTube backend\"],\n  \"notes\": {\n    \"exact_duration_seconds\": \"calculated timing\",\n    \"word_count\": \"precise count for TTS\",\n    \"engagement_hooks\": \"hooks per 5-second intervals\",\n    \"algorithm_score\": \"optimization rating\"\n  }\n}\"\"\"\n\ndef generate_hindi_script(input_payload):\n    \"\"\"\n    Generate Hindi YouTube script using Gemini API with genre-based storytelling\n    \"\"\"\n    try:\n        # Extract content details\n        content = input_payload.get('content', {})\n        generation = input_payload.get('generation', {})\n        \n        topic = content.get('topic', '')\n        genre = content.get('genre', 'informative')\n        description = content.get('description', '')\n        duration_seconds = generation.get('duration_seconds', 45)\n        \n        # Get genre-specific guidelines\n        genre_guidance = GENRE_GUIDELINES.get(genre, GENRE_GUIDELINES['informative'])\n        \n        # Calculate target word count\n        target_words = int((duration_seconds / 60) * 150)\n        \n        # Construct genre-specific prompt\n        prompt = f\"\"\"{SYSTEM_INSTRUCTIONS}\n\n{CORE_PROMPT}\n\nGENRE-SPECIFIC GUIDELINES:\n{genre_guidance}\n\nSCRIPT REQUIREMENTS:\n- Topic: {topic}\n- Genre: {genre.title()}\n- Duration: {duration_seconds} seconds (approximately {target_words} words)\n- Description: {description if description else 'Generate creatively based on topic and genre'}\n- Language: Hindi (conversational and engaging)\n- Format: YouTube-optimized for maximum reach\n\nCREATE A COMPELLING {genre.upper()} SCRIPT:\n1. Hook viewers in first 3 seconds with genre-appropriate opening\n2. Develop story using {genre} storytelling techniques\n3. Maintain engagement with genre-specific language and pacing\n4. Include natural transitions and emotional connection\n5. End with strong call-to-action\n6. Ensure exact timing: {duration_seconds} seconds = ~{target_words} words\n\nGenerate a complete script following the OUTPUT SCHEMA.\"\"\"\n        \n        # Generate content using Gemini\n        response = client.models.generate_content(\n            model=\"gemini-2.5-flash\",\n            contents=prompt,\n            config=types.GenerateContentConfig(\n                temperature=0.7,\n                top_p=0.9,\n                response_mime_type=\"application/json\"\n            )\n        )\n        \n        if not response.text:\n            return {\"error\": \"Empty response from Gemini API\"}\n        \n        # Parse the JSON response\n        try:\n            result = json.loads(response.text)\n            \n            # Validate required fields in response\n            required_fields = [\"title\", \"vo_script\", \"on_screen_text\", \"description\", \"hashtags\"]\n            missing_fields = [field for field in required_fields if field not in result]\n            \n            if missing_fields:\n                logging.warning(f\"Response missing fields: {missing_fields}\")\n                return {\"error\": f\"Invalid response format: missing {missing_fields}\"}\n            \n            # Validate title length\n            if len(result.get(\"title\", \"\")) > 65:\n                result[\"title\"] = result[\"title\"][:62] + \"...\"\n            \n            return result\n            \n        except json.JSONDecodeError as e:\n            logging.error(f\"Failed to parse JSON response: {e}\")\n            logging.error(f\"Raw response: {response.text}\")\n            return {\"error\": \"Invalid JSON response from API\"}\n        \n    except Exception as e:\n        logging.error(f\"Gemini API error: {str(e)}\")\n        return {\"error\": f\"API call failed: {str(e)}\"}\n\n\ndef humanize_hindi_script(raw_script, duration_seconds=45):\n    \"\"\"\n    Humanize an existing Hindi script to make it sound more natural and conversational\n    \"\"\"\n    try:\n        # System instructions for humanization\n        humanization_instructions = \"\"\"You are a Hindi script humanization expert. Your task is to take a raw or AI-generated Hindi script and rewrite it to sound completely natural, as if a human is actually speaking it.\n\nKey principles:\n- Make it sound conversational and natural\n- Use simple, everyday Hindi words that people actually speak\n- Add natural speech patterns, pauses, and emotional inflections\n- Keep the core message and facts intact\n- Use TTS-friendly formatting with ellipses (...) for natural pauses\n- Add emphasis with em dashes (—) where appropriate\n- Make it feel like a real person telling a story, not reading from a script\n- Remove any robotic or AI-sounding language\n- Add natural transitions and conversational connectors\n- Ensure it flows smoothly when spoken aloud\n\nOutput the same JSON format with humanized content:\"\"\"\n        \n        # Calculate target word count based on duration\n        target_words = int((duration_seconds / 60) * 150)  # 150 WPM for Hindi TTS\n        \n        # Construct the humanization prompt with timing\n        prompt = f\"\"\"{humanization_instructions}\n\n{CORE_PROMPT}\n\nTarget Duration: {duration_seconds} seconds (approximately {target_words} words)\n\nOriginal Raw Script to Humanize:\n{raw_script}\n\nPlease rewrite this script to:\n1. Sound completely natural and human-like\n2. Fit exactly {duration_seconds} seconds when spoken (around {target_words} words)\n3. Maintain the core message while making it conversational\n4. Add proper pacing with natural pauses and emphasis\n5. Use engaging storytelling techniques appropriate for the content\"\"\"\n        \n        # Generate humanized content using Gemini\n        response = client.models.generate_content(\n            model=\"gemini-2.5-flash\",\n            contents=prompt,\n            config=types.GenerateContentConfig(\n                temperature=0.8,  # Slightly higher for more creative humanization\n                top_p=0.9,\n                response_mime_type=\"application/json\"\n            )\n        )\n        \n        if not response.text:\n            return {\"error\": \"Empty response from Gemini API\"}\n        \n        # Parse the JSON response\n        try:\n            result = json.loads(response.text)\n            \n            # Validate required fields in response\n            required_fields = [\"title\", \"vo_script\", \"on_screen_text\", \"description\", \"hashtags\"]\n            missing_fields = [field for field in required_fields if field not in result]\n            \n            if missing_fields:\n                logging.warning(f\"Response missing fields: {missing_fields}\")\n                return {\"error\": f\"Invalid response format: missing {missing_fields}\"}\n            \n            # Validate title length\n            if len(result.get(\"title\", \"\")) > 65:\n                result[\"title\"] = result[\"title\"][:62] + \"...\"\n            \n            # Add processing notes\n            if \"notes\" not in result:\n                result[\"notes\"] = {}\n            \n            # Add humanization-specific notes\n            result[\"notes\"][\"humanized\"] = True\n            result[\"notes\"][\"original_length\"] = len(raw_script)\n            result[\"notes\"][\"target_duration\"] = f\"{duration_seconds} seconds\"\n            result[\"notes\"][\"processing\"] = \"Script humanized for natural speech\"\n            \n            return result\n            \n        except json.JSONDecodeError as e:\n            logging.error(f\"Failed to parse JSON response: {e}\")\n            logging.error(f\"Raw response: {response.text}\")\n            return {\"error\": \"Invalid JSON response from API\"}\n        \n    except Exception as e:\n        logging.error(f\"Gemini API error during humanization: {str(e)}\")\n        return {\"error\": f\"Humanization failed: {str(e)}\"}\n","size_bytes":13347},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"google-genai>=1.32.0\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sift-stack-py>=0.8.4\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":359},"replit.md":{"content":"# Overview\n\nThis project is a Hindi YouTube Script Generator web application that creates conversational-investigative Hindi scripts for YouTube content. The application specializes in generating scripts for both Shorts (45-60 seconds) and long-form videos (3-5 minutes) with a focus on sensitive topics like legal cases, using neutral and legally-safe language framing. It integrates with Google's Gemini AI to generate structured content including titles, voice-over scripts, on-screen text, descriptions, and hashtags optimized for text-to-speech and YouTube SEO.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a traditional server-side rendered architecture with Bootstrap for responsive UI components. The frontend consists of:\n- **Template System**: Jinja2 templating with Flask, using a base template layout with Bootstrap dark theme\n- **Form-based Interface**: Single-page form for inputting script generation parameters including topic, location, victim role, duration, timeline, and keywords\n- **Real-time Feedback**: JavaScript-powered form validation, character counting, and copy-to-clipboard functionality\n- **Responsive Design**: Bootstrap-based responsive layout optimized for both desktop and mobile usage\n\n## Backend Architecture\nThe backend follows a simple Flask-based MVC pattern:\n- **Flask Application**: Lightweight web framework with ProxyFix middleware for deployment compatibility\n- **Route Handling**: Centralized route management in `routes.py` with JSON and form data support\n- **Service Layer**: Dedicated `gemini_service.py` for AI integration and content generation logic\n- **Error Handling**: Comprehensive validation for required fields and JSON parsing with graceful fallbacks\n\n## AI Integration Architecture\nThe application integrates with Google's Gemini AI service through a structured approach:\n- **System Instructions**: Pre-defined prompt engineering with safety guardrails for defamation protection and cultural sensitivity\n- **Structured Output**: JSON schema enforcement for consistent response formatting\n- **Content Safety**: Built-in legal-safe framing using neutral language (\"आरोप/दावा\" instead of direct accusations)\n- **TTS Optimization**: Script formatting optimized for text-to-speech with breath markers and emphasis tags\n\n## Content Generation Pipeline\nThe system follows a multi-step content generation process:\n1. **Input Validation**: Server-side validation of required fields with intelligent parsing of timeline and keyword data\n2. **Prompt Construction**: Dynamic prompt building based on duration (short vs long) with specific structural requirements\n3. **AI Processing**: Gemini API calls with temperature and safety settings configured for creative yet safe content\n4. **Output Formatting**: Structured JSON response containing title, script, on-screen text, description, and hashtags\n5. **Client Rendering**: Real-time display of generated content with copy functionality\n\n# External Dependencies\n\n## AI Services\n- **Google Gemini API**: Primary AI service for content generation using the `google.genai` client library\n- **Model Configuration**: Uses Gemini 2.5 Flash model with specific temperature (0.7) and top_p (0.9) settings for balanced creativity and consistency\n\n## Frontend Libraries\n- **Bootstrap 5.3.0**: UI framework with dark theme variant from Replit CDN for consistent styling\n- **Font Awesome 6.0.0**: Icon library for enhanced user interface elements\n- **Google Fonts**: Noto Sans Devanagari font family for proper Hindi text rendering and readability\n\n## Python Dependencies\n- **Flask**: Web application framework for routing and template rendering\n- **Werkzeug ProxyFix**: Middleware for handling proxy headers in deployment environments\n- **Python Logging**: Built-in logging configuration for debugging and monitoring\n\n## Environment Configuration\n- **API Key Management**: Environment variable-based configuration for Gemini API key (`GEMINI_API_KEY`)\n- **Session Management**: Configurable session secret key with development fallback\n- **Debug Mode**: Development-friendly configuration with detailed error reporting","size_bytes":4225},"routes.py":{"content":"import json\nimport logging\nfrom flask import render_template, request, jsonify, flash\nfrom app import app\nfrom gemini_service import generate_hindi_script, humanize_hindi_script\n\n@app.route('/')\ndef index():\n    \"\"\"Main page with the script generation form\"\"\"\n    return render_template('index.html')\n\n@app.route('/generate', methods=['POST'])\ndef generate_script():\n    \"\"\"Handle script generation requests\"\"\"\n    try:\n        # Get form data\n        form_data = request.get_json() if request.is_json else request.form.to_dict()\n        \n        # Check mode\n        mode = form_data.get('mode', 'generate')\n        \n        if mode == 'humanize':\n            # Mode 1: Humanize - Validate required fields\n            if not form_data.get('raw_script'):\n                return jsonify({\n                    'error': 'Raw script is required for humanization mode'\n                }), 400\n        else:\n            # Mode 2: Generate - Validate required fields\n            required_fields = ['topic', 'genre']\n            missing_fields = [field for field in required_fields if not form_data.get(field)]\n            \n            if missing_fields:\n                return jsonify({\n                    'error': f'Missing required fields: {\", \".join(missing_fields)}'\n                }), 400\n        \n        logging.info(f\"Processing {mode} request\")\n        \n        if mode == 'humanize':\n            # Mode 1: Handle humanization mode\n            duration_seconds = int(form_data.get('duration_seconds', 45))\n            try:\n                result = humanize_hindi_script(form_data.get('raw_script'), duration_seconds)\n            except Exception as api_error:\n                logging.error(f\"Gemini API error in humanize mode: {str(api_error)}\")\n                return jsonify({\n                    'error': 'Script humanization service is temporarily unavailable. Please try again in a few moments.'\n                }), 503\n        else:\n            # Mode 2: Handle generation mode\n            # No additional parsing needed\n            \n            # Build input payload for genre-based generation\n            duration_seconds = int(form_data.get('duration_seconds', 45))\n            input_payload = {\n                \"api_key_mode\": \"env\",\n                \"generation\": {\n                    \"duration_seconds\": duration_seconds,\n                    \"duration_type\": \"short\" if duration_seconds <= 60 else \"long\",\n                    \"language\": \"hi\",\n                    \"voice_tags\": True,\n                    \"youtube_optimized\": True,\n                    \"algorithm_focus\": \"maximum_reach\"\n                },\n                \"content\": {\n                    \"topic\": form_data.get('topic'),\n                    \"genre\": form_data.get('genre'),\n                    \"description\": form_data.get('description', '')\n                },\n                \"seo\": {\n                    \"hashtag_style\": \"youtube_optimized\",\n                    \"audience\": \"16-35, Hindi, storytelling\",\n                    \"platform\": \"youtube\",\n                    \"optimization_goal\": \"viral_reach\"\n                }\n            }\n            \n            # Generate script using Gemini API\n            try:\n                result = generate_hindi_script(input_payload)\n            except Exception as api_error:\n                logging.error(f\"Gemini API error in generate mode: {str(api_error)}\")\n                return jsonify({\n                    'error': 'Script generation service is temporarily unavailable. Please try again in a few moments.'\n                }), 503\n        \n        if result.get('error'):\n            return jsonify({'error': result['error']}), 500\n        \n        return jsonify(result)\n        \n    except Exception as e:\n        logging.error(f\"Error processing script: {str(e)}\")\n        return jsonify({'error': f'Script processing failed: {str(e)}'}), 500\n\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('index.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    return render_template('index.html'), 500\n","size_bytes":4073},"static/css/style.css":{"content":"/* Enhanced dark theme and aesthetics */\n.form-control, .form-select {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: var(--bs-dark);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    color: var(--bs-light);\n    transition: all 0.3s ease;\n}\n\n.form-control:focus, .form-select:focus {\n    background-color: rgba(255, 255, 255, 0.05);\n    border-color: var(--bs-warning);\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.25);\n}\n\n.card {\n    background: linear-gradient(135deg, rgba(33, 37, 41, 0.95), rgba(52, 58, 64, 0.95));\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.bg-gradient {\n    background: linear-gradient(135deg, var(--bs-primary), var(--bs-info)) !important;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, #007bff, #0056b3);\n    border: none;\n    transition: all 0.3s ease;\n}\n\n.btn-primary:hover {\n    background: linear-gradient(135deg, #0056b3, #004085);\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);\n}\n\n/* Hindi text styling */\n#resultScript, #resultDescription, #resultTitle, #resultOnScreen {\n    font-family: 'Noto Sans Devanagari', 'Segoe UI', Arial, sans-serif;\n    line-height: 1.6;\n}\n\n/* Loading spinner container */\n#loadingSpinner {\n    padding: 3rem 0;\n    background: radial-gradient(circle, rgba(0, 123, 255, 0.1), transparent);\n    border-radius: 15px;\n}\n\n.spinner-border {\n    color: var(--bs-warning) !important;\n}\n\n/* Glowing effect for active elements */\n.card:hover {\n    box-shadow: 0 10px 30px rgba(0, 123, 255, 0.2);\n    transform: translateY(-5px);\n    transition: all 0.3s ease;\n}\n\n/* Enhanced result container */\n#resultContainer {\n    animation: fadeInUp 0.5s ease-out;\n}\n\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* YouTube-style aesthetics */\n.form-text {\n    color: rgba(255, 255, 255, 0.7);\n    font-size: 0.875rem;\n}\n\n.text-warning {\n    color: #ffc107 !important;\n}\n\n.text-success {\n    color: #28a745 !important;\n}\n\n/* Custom scrollbar */\ntextarea::-webkit-scrollbar {\n    width: 8px;\n}\n\ntextarea::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 4px;\n}\n\ntextarea::-webkit-scrollbar-thumb {\n    background: var(--bs-warning);\n    border-radius: 4px;\n}\n\ntextarea::-webkit-scrollbar-thumb:hover {\n    background: #e0a800;\n}\n\n/* Result container styling */\n#resultContainer .position-relative {\n    position: relative;\n}\n\n#resultContainer .btn-sm {\n    font-size: 0.75rem;\n    padding: 0.25rem 0.5rem;\n}\n\n/* Character count styling */\n.form-text {\n    font-size: 0.875rem;\n}\n\n/* Empty state styling */\n#emptyState {\n    padding: 3rem 0;\n    background: radial-gradient(circle, rgba(255, 255, 255, 0.05), transparent);\n    border-radius: 15px;\n    border: 2px dashed rgba(255, 255, 255, 0.1);\n}\n\n#emptyState .fa-video {\n    opacity: 0.3;\n    color: var(--bs-warning);\n}\n\n/* Floating animation for icons */\n@keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n}\n\n.fa-pen-fancy, .fa-file-alt {\n    animation: float 3s ease-in-out infinite;\n}\n\n.fa-file-alt {\n    animation-delay: 1.5s;\n}\n\n/* Toast styling */\n.toast {\n    border: none;\n    background-color: var(--bs-dark);\n    color: var(--bs-light);\n}\n\n/* Enhanced responsive design */\n@media (max-width: 768px) {\n    .card {\n        margin-bottom: 2rem;\n        border-radius: 15px;\n    }\n    \n    .position-absolute.top-0.end-0 {\n        position: static !important;\n        margin: 0.5rem 0 0 0 !important;\n        width: 100%;\n    }\n    \n    .btn-lg {\n        padding: 15px 20px;\n        font-size: 1.1rem;\n    }\n    \n    .card-header {\n        border-radius: 15px 15px 0 0 !important;\n    }\n}\n\n/* Dark theme enhancements */\nbody {\n    background: radial-gradient(ellipse at center, #1a1a2e 0%, #16213e 50%, #0f3460 100%);\n    min-height: 100vh;\n}\n\n.container {\n    max-width: 1400px;\n}\n\n/* Advanced button styling */\n.btn-outline-light:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n    border-color: var(--bs-warning);\n    color: var(--bs-warning);\n}\n\n/* Notification styling */\n.alert {\n    border: none;\n    border-radius: 10px;\n    backdrop-filter: blur(10px);\n}\n\n.alert-danger {\n    background: rgba(220, 53, 69, 0.1);\n    color: #ff6b6b;\n    border: 1px solid rgba(220, 53, 69, 0.3);\n}\n\n/* Form validation styles */\n.was-validated .form-control:invalid {\n    border-color: var(--bs-danger);\n}\n\n.was-validated .form-control:valid {\n    border-color: var(--bs-success);\n}\n\n/* Enhanced font loading */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Devanagari:wght@400;500;600&family=Inter:wght@300;400;500;600;700&display=swap');\n\n/* Premium typography */\nbody {\n    font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;\n    font-weight: 400;\n    line-height: 1.6;\n}\n\nh1, h2, h3, h4, h5, h6 {\n    font-family: 'Inter', sans-serif;\n    font-weight: 600;\n}\n\n.navbar-brand {\n    font-weight: 700;\n    font-size: 1.3rem;\n}\n\n/* YouTube-style progress indicator */\n.progress-bar {\n    background: linear-gradient(90deg, var(--bs-primary), var(--bs-success));\n    transition: width 0.6s ease;\n}\n\n/* Enhanced shadow effects */\n.shadow-lg {\n    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3), 0 3px 10px rgba(0, 0, 0, 0.1) !important;\n}\n\n/* Mode selection cards */\n.cursor-pointer {\n    cursor: pointer;\n}\n\n#mode1Card, #mode2Card {\n    transition: all 0.3s ease;\n    border-color: rgba(255, 255, 255, 0.2) !important;\n}\n\n#mode1Card:hover, #mode2Card:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px rgba(0, 123, 255, 0.15);\n}\n\n#mode1Card.active {\n    border-color: var(--bs-warning) !important;\n    background: linear-gradient(135deg, rgba(255, 193, 7, 0.1), rgba(255, 193, 7, 0.05));\n}\n\n#mode2Card.active {\n    border-color: var(--bs-success) !important;\n    background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05));\n}\n\n.mode-icon {\n    transition: transform 0.3s ease;\n}\n\n.card.active .mode-icon {\n    transform: scale(1.1);\n}\n\n/* Fix dropdown text visibility */\n.form-select {\n    color: var(--bs-body-color) !important;\n    background-color: var(--bs-body-bg) !important;\n    border-color: var(--bs-border-color) !important;\n}\n\n.form-select option {\n    color: var(--bs-body-color) !important;\n    background-color: var(--bs-body-bg) !important;\n}\n\n.form-select:focus {\n    color: var(--bs-body-color) !important;\n    background-color: var(--bs-body-bg) !important;\n    border-color: var(--bs-primary) !important;\n    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);\n}\n\n/* Smooth transitions */\n* {\n    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;\n}\n","size_bytes":6830},"static/js/script.js":{"content":"// Global variables\nlet currentResult = null;\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeForm();\n    initializeEventListeners();\n});\n\nfunction initializeForm() {\n    // Set default values for both duration selectors\n    const humanizeDuration = document.getElementById('humanize_duration');\n    const generateDuration = document.getElementById('generate_duration');\n    \n    if (humanizeDuration) humanizeDuration.value = '45';\n    if (generateDuration) generateDuration.value = '45';\n    \n    // Initialize mode\n    handleModeChange();\n}\n\nfunction initializeEventListeners() {\n    // Form submission\n    document.getElementById('scriptForm').addEventListener('submit', handleFormSubmit);\n    \n    // Copy all button\n    document.getElementById('copyAllBtn').addEventListener('click', copyAllContent);\n    \n    // Real-time character count for title\n    document.getElementById('resultTitle').addEventListener('input', updateTitleLength);\n    \n    // Mode selection\n    document.getElementById('mode1').addEventListener('change', handleModeChange);\n    document.getElementById('mode2').addEventListener('change', handleModeChange);\n    \n    // Genre selection\n    document.getElementById('genre').addEventListener('change', handleGenreChange);\n    \n    // Mode card clicks\n    document.getElementById('mode1Card').addEventListener('click', () => {\n        document.getElementById('mode1').checked = true;\n        handleModeChange();\n    });\n    document.getElementById('mode2Card').addEventListener('click', () => {\n        document.getElementById('mode2').checked = true;\n        handleModeChange();\n    });\n}\n\nasync function handleFormSubmit(event) {\n    event.preventDefault();\n    \n    const form = event.target;\n    const formData = new FormData(form);\n    \n    // Validate form\n    if (!form.checkValidity()) {\n        form.classList.add('was-validated');\n        return;\n    }\n    \n    // Show loading state\n    showLoading();\n    \n    try {\n        // Check mode\n        const isHumanizeMode = document.getElementById('mode1').checked;\n        \n        // Prepare data based on mode\n        const data = {\n            mode: isHumanizeMode ? 'humanize' : 'generate'\n        };\n        \n        if (isHumanizeMode) {\n            // Mode 1: Humanize - send raw script and duration\n            data.raw_script = formData.get('raw_script');\n            data.duration_seconds = parseInt(formData.get('humanize_duration')) || 45;\n        } else {\n            // Mode 2: Generate - send topic, genre, description, and duration\n            data.topic = formData.get('topic');\n            data.genre = formData.get('genre');\n            data.description = formData.get('description') || '';\n            data.duration_seconds = parseInt(formData.get('generate_duration')) || 45;\n        }\n        \n        // Make API call\n        const response = await fetch('/generate', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        });\n        \n        const result = await response.json();\n        \n        if (response.ok) {\n            displayResult(result);\n        } else {\n            showError(result.error || 'Unknown error occurred');\n        }\n        \n    } catch (error) {\n        console.error('Error:', error);\n        showError('Network error. Please check your connection and try again.');\n    }\n}\n\nfunction showLoading() {\n    document.getElementById('emptyState').style.display = 'none';\n    document.getElementById('errorMessage').style.display = 'none';\n    document.getElementById('resultContainer').style.display = 'none';\n    document.getElementById('loadingSpinner').style.display = 'block';\n    document.getElementById('copyAllBtn').style.display = 'none';\n    \n    // Show button spinner\n    const generateBtn = document.getElementById('generateBtn');\n    const buttonSpinner = document.getElementById('buttonSpinner');\n    const buttonText = document.getElementById('buttonText');\n    \n    generateBtn.disabled = true;\n    buttonSpinner.style.display = 'inline-block';\n    buttonText.textContent = 'Generating...';\n}\n\nfunction showError(message) {\n    document.getElementById('loadingSpinner').style.display = 'none';\n    document.getElementById('resultContainer').style.display = 'none';\n    document.getElementById('emptyState').style.display = 'none';\n    document.getElementById('copyAllBtn').style.display = 'none';\n    \n    document.getElementById('errorText').textContent = message;\n    document.getElementById('errorMessage').style.display = 'block';\n    \n    // Reset button state\n    resetButtonState();\n}\n\nfunction displayResult(result) {\n    currentResult = result;\n    \n    document.getElementById('loadingSpinner').style.display = 'none';\n    document.getElementById('errorMessage').style.display = 'none';\n    document.getElementById('emptyState').style.display = 'none';\n    \n    // Populate result fields\n    document.getElementById('resultTitle').value = result.title || '';\n    document.getElementById('resultScript').value = result.vo_script || '';\n    document.getElementById('resultOnScreen').value = Array.isArray(result.on_screen_text) \n        ? result.on_screen_text.join('\\n') : result.on_screen_text || '';\n    document.getElementById('resultDescription').value = result.description || '';\n    document.getElementById('resultHashtags').value = Array.isArray(result.hashtags) \n        ? result.hashtags.join(' ') : result.hashtags || '';\n    \n    // Update notes\n    if (result.notes) {\n        const notesContainer = document.getElementById('resultNotes');\n        notesContainer.innerHTML = ''; // Clear existing content\n        \n        // Create safe DOM elements\n        const paceDiv = document.createElement('div');\n        const paceStrong = document.createElement('strong');\n        paceStrong.textContent = 'Pace:';\n        paceDiv.appendChild(paceStrong);\n        paceDiv.appendChild(document.createTextNode(' ' + (result.notes.pace_wpm || 150) + ' WPM'));\n        \n        const ttsDiv = document.createElement('div');\n        const ttsStrong = document.createElement('strong');\n        ttsStrong.textContent = 'TTS Tags:';\n        ttsDiv.appendChild(ttsStrong);\n        ttsDiv.appendChild(document.createTextNode(' ' + (result.notes.tts_tags_used ? 'Used' : 'Not used')));\n        \n        const legalDiv = document.createElement('div');\n        const legalStrong = document.createElement('strong');\n        legalStrong.textContent = 'Legal Framing:';\n        legalDiv.appendChild(legalStrong);\n        legalDiv.appendChild(document.createTextNode(' ' + (result.notes.legal_framing || 'Neutral')));\n        \n        notesContainer.appendChild(paceDiv);\n        notesContainer.appendChild(ttsDiv);\n        notesContainer.appendChild(legalDiv);\n    }\n    \n    // Display YouTube tags if available\n    if (result.youtube_tags && result.youtube_tags.length > 0) {\n        document.getElementById('resultYoutubeTags').value = Array.isArray(result.youtube_tags) \n            ? result.youtube_tags.join(', ') : result.youtube_tags || '';\n        document.getElementById('youtubeTagsSection').style.display = 'block';\n    } else {\n        document.getElementById('youtubeTagsSection').style.display = 'none';\n    }\n    \n    // Update title length\n    updateTitleLength();\n    \n    // Show result container and copy button\n    document.getElementById('resultContainer').style.display = 'block';\n    document.getElementById('copyAllBtn').style.display = 'inline-block';\n    \n    // Reset button state\n    resetButtonState();\n}\n\nfunction updateTitleLength() {\n    const title = document.getElementById('resultTitle').value;\n    const length = title.length;\n    const lengthElement = document.getElementById('titleLength');\n    \n    if (lengthElement) {\n        lengthElement.textContent = length;\n        lengthElement.className = length > 65 ? 'text-warning' : 'text-muted';\n    }\n}\n\nfunction copyToClipboard(elementId) {\n    const element = document.getElementById(elementId);\n    \n    if (element) {\n        element.select();\n        element.setSelectionRange(0, 99999); // For mobile devices\n        \n        try {\n            document.execCommand('copy');\n            showCopyToast();\n        } catch (err) {\n            // Fallback for modern browsers\n            navigator.clipboard.writeText(element.value).then(() => {\n                showCopyToast();\n            }).catch(() => {\n                alert('Failed to copy content');\n            });\n        }\n    }\n}\n\nfunction copyAllContent() {\n    if (!currentResult) return;\n    \n    const allContent = `\nTITLE:\n${currentResult.title || ''}\n\nVOICE OVER SCRIPT:\n${currentResult.vo_script || ''}\n\nON-SCREEN TEXT:\n${Array.isArray(currentResult.on_screen_text) ? currentResult.on_screen_text.join('\\n') : currentResult.on_screen_text || ''}\n\nDESCRIPTION:\n${currentResult.description || ''}\n\nHASHTAGS:\n${Array.isArray(currentResult.hashtags) ? currentResult.hashtags.join(' ') : currentResult.hashtags || ''}\n\nYOUTUBE TAGS:\n${Array.isArray(currentResult.youtube_tags) ? currentResult.youtube_tags.join(', ') : currentResult.youtube_tags || ''}\n    `.trim();\n    \n    try {\n        navigator.clipboard.writeText(allContent).then(() => {\n            showCopyToast();\n        }).catch(() => {\n            // Fallback\n            const textArea = document.createElement('textarea');\n            textArea.value = allContent;\n            document.body.appendChild(textArea);\n            textArea.select();\n            document.execCommand('copy');\n            document.body.removeChild(textArea);\n            showCopyToast();\n        });\n    } catch (err) {\n        alert('Failed to copy content');\n    }\n}\n\nfunction showCopyToast() {\n    const toast = new bootstrap.Toast(document.getElementById('copyToast'));\n    toast.show();\n}\n\nfunction handleModeChange() {\n    const mode1 = document.getElementById('mode1');\n    const mode2 = document.getElementById('mode2');\n    \n    if (!mode1 || !mode2) return; // Safety check\n    \n    const isHumanizeMode = mode1.checked;\n    \n    const buttonText = document.getElementById('buttonText');\n    const humanizeSection = document.getElementById('humanizeSection');\n    const generateSection = document.getElementById('generateSection');\n    const rawScriptInput = document.getElementById('raw_script');\n    const topicInput = document.getElementById('topic');\n    const genreInput = document.getElementById('genre');\n    const mode1Card = document.getElementById('mode1Card');\n    const mode2Card = document.getElementById('mode2Card');\n    \n    // Update card styling\n    if (mode1Card) mode1Card.classList.toggle('active', isHumanizeMode);\n    if (mode2Card) mode2Card.classList.toggle('active', !isHumanizeMode);\n    \n    if (isHumanizeMode) {\n        // Mode 1: Humanize\n        if (buttonText) buttonText.textContent = 'Humanize Script';\n        if (humanizeSection) humanizeSection.style.display = 'block';\n        if (generateSection) generateSection.style.display = 'none';\n        if (rawScriptInput) rawScriptInput.required = true;\n        \n        // Remove required from generate mode fields\n        if (topicInput) topicInput.required = false;\n        if (genreInput) genreInput.required = false;\n    } else {\n        // Mode 2: Generate\n        if (buttonText) buttonText.textContent = 'Generate Script';\n        if (humanizeSection) humanizeSection.style.display = 'none';\n        if (generateSection) generateSection.style.display = 'block';\n        if (rawScriptInput) rawScriptInput.required = false;\n        \n        // Add required to generate mode fields\n        if (topicInput) topicInput.required = true;\n        if (genreInput) genreInput.required = true;\n        \n        // Trigger genre change to show/hide options\n        handleGenreChange();\n    }\n}\n\nfunction handleGenreChange() {\n    // Genre change handler - no additional options needed now\n    const genre = document.getElementById('genre').value;\n    // All genres use the same form fields now\n}\n\nfunction resetButtonState() {\n    const generateBtn = document.getElementById('generateBtn');\n    const buttonSpinner = document.getElementById('buttonSpinner');\n    const buttonText = document.getElementById('buttonText');\n    const isHumanizeMode = document.getElementById('mode1').checked;\n    \n    generateBtn.disabled = false;\n    buttonSpinner.style.display = 'none';\n    buttonText.textContent = isHumanizeMode ? 'Humanize Script' : 'Generate Script';\n}\n\n// Form validation\n(function() {\n    'use strict';\n    \n    // Fetch all the forms we want to apply custom Bootstrap validation styles to\n    const forms = document.querySelectorAll('.needs-validation');\n    \n    // Loop over them and prevent submission\n    Array.prototype.slice.call(forms).forEach(function(form) {\n        form.addEventListener('submit', function(event) {\n            if (!form.checkValidity()) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            form.classList.add('was-validated');\n        }, false);\n    });\n})();\n","size_bytes":13150}},"version":1}